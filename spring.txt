IoC (Inversion of Control)
Фреймворк САМ определяет, когда ему нуджно вызвать ваш код.

DI (Dependency inversion) или (Dependency injection)

Dependency inversion (инверсия зависимости)- последний из принципов SOLID. Он используется,
чтобы разделить модули с помощью абстракции. Если сказать по-другому, избавляет от жестких связей между модулями/классами
программы.

Dependency injection (внедрение зависимости) - избавляет от инстанции (в моем понимании это создание объекта) вручную. 
Это реализуется с помощью фреймворка, который постороен по принципу IoC. То есть если нужно создать объект котят, за вас это
сделает spring (через конструктор).

Подробнее: https://habr.com/ru/post/321344/

-------------------------------------------------------------------------------------------------------------------------------

Bean - какой-то объект, созданный спрингом.

Контекст - набор бинов. Обращаясь к контексту, мы можем получить нужный нам бин по его имени, по его типу или как-то иначе. 
Также мы можем попросить спринг пойти поискать бин и передать его в наш метод.

-------------------------------------------------------------------------------------------------------------------------------

Способы конфигурации приложения:
1. xml файлы/конфиги (низкий приоритет)
2. java-конфиги (среднний приоритет)
3. автоматическая конфигурация (максимальный приоритет)

Способы конфигурации можно комбинировать

Подробнее: https://javarush.ru/groups/posts/spring-framework-java-1

-------------------------------------------------------------------------------------------------------------------------------

Аннотации

@Component - указываем над классом, из которого спринг должен сделать бин. Можно указать имя бина: @Component("name")
@Controller
@RestController
@Service
@Repository

@RequestMapping("/chats") - указываем путь для контроллера
@RequestMapping(value = "/", method = RequestMethod.GET) - указываем путь для метода и метод запроса. Value - сюда пишем путь
method - сюда указываем метод.
@SessionAttribute(name = "user", required = false) - используем в параметрах метода для указания откуда брать данный параметр.
name - указывает на название параметра, required - обязательный параметр или нет.
@Qualifier("bean_name") - указывает, какой конкретно бин нужно вызвать

-------------------------------------------------------------------------------------------------------------------------------

applicationContext.xml

Создание бина из класса

<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>

В <constructor-arg> указываем имя принимаемого бина (name), откуда брать (ref). Если нужно ввести значение,
тогда используется параметр value. 

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
    </bean>


<context:component-scan base-package="by.it.academy.MK_JD2_88_2.hw1.storage, by.it.academy.MK_JD2_88_2.hw1.dto,
     by.it.academy.MK_JD2_88_2.hw1.service"/>

Здесь указываем пакеты, где необходимо искать бины. 

Можно импортировать xml файл таким образом: <import resource="applicationContext.xml"></import>

В applicationContext.xml мы прописываем путь для бинов, которые используются для сервисов и репозиториев,
а в mvc-servlet.xml - для бинов контроллеров

	
